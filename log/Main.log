=== Parsing ===
[DEBUG] rootDirPath : ./examples/
[DEBUG] logDirPath  : ./log/
[DEBUG] validExt    : .hs
[DEBUG] Start parsing Main-Root
[DEBUG] Start parsing A-TBD
[DEBUG] Versions found : [1.0.0, 1.0.1]
[DEBUG] Start parsing B-TBD
[DEBUG] Versions found : [1.0.0, 1.0.1]
[DEBUG] There are no rest modules to parse.
=== Parsed Modules ===
=== A-1.0.0
module A where

import B

a = f y

=== A-1.0.1
module A where

import B

a = f (f y)

=== B-1.0.0
module B where

y = 1
b1 = 1
f x = x + 1

g x = x + 1














=== B-1.0.1
module B where

y = 2
b2 = 2
f x = x + 2

h x = x * 1



=== Main-Root
module Main where

import A
import B








































main =
  let sumTpl x = case x of (x1,x2) -> x1 + x2
  in sumTpl (y,b1)














=== Compilation order ===
B-1.0.1
B-1.0.0
A-1.0.1
A-1.0.0
Main-Root

===================================
=== Start compiling module B-1.0.1
===================================

=== AST (Syntax.Absyn) ===
module B where

y = 2
b2 = 2
f x = x + 2

h x = x * 1



=== Name resolution ===
module B where

y = 2
b2 = 2
f x = x + 2

h x = x * 1




=== Desugared AST (Syntax.Desugared) ===
module B where where
y = 2

b2 = 2

f = (\x.((+ x) 2))

h = (\x.((* x) 1))


=== Normalized AST (Syntax.Desugared) ===
module B where where
y = 2

b2 = 2

f = (\x.((+ x) 2))

h = (\x.((* x) 1))


=== AST (Syntax.VL) ===
module B where where
y = 2

b2 = 2

f = (\[x].((+ [x]) [2]))

h = (\[x].((* [x]) [1]))


=== AST (Syntax.VL), after duplicating external variables ===
module B where where
y = 2

b2 = 2

f = (\[x].((+ [x]) [2]))

h = (\[x].((* [x]) [1]))

[DEBUG] ct     : 
[DEBUG] ct'    : *->0, +->0
[DEBUG] ctdiff : *->0, +->0
[DEBUG] ctstart: *->0, +->0

=== Importing Exteranal ModulesType (Syntax.VL) ===
[DEBUG] Imported TEnv      : {}
[DEBUG] Imported UEnv      : {}
=== Duplicate External Symbols (Syntax.VL) ===
[DEBUG] Duplicated Imported TEnv        : {}
[DEBUG] Duplicated Imported UEnv        : {}
[DEBUG] Duplicated Imported Constraints : ⊤

[DEBUG] add duplicated constraints                 : 
⊤
[DEBUG] add duplicated external variable resources : 
{}

[DEBUG] Initial Counter     : 0

=== Type Inference (Syntax.VL) ===
B.y : Int@[a2]
|(TypeInf) {} |- 2 => (Int; (); ⊤)
(TypeInf) B.y:[a0]_(a1) |- [2] => (Int@[a2]; (); ⊤)
B.b2 : Int@[a6]
|(TypeInf) {} |- 2 => (Int; (); ⊤)
(TypeInf) B.b2:[a4]_(a5), B.y:[Int]_(a3) |- [2] => (Int@[a6]; (); ⊤)
B.f : (Int@[a12] -> Int)@[a20]
|||(Kinding) |- a12 : Label
||||(Kinding) |- a13 : Type
||||(Kinding) |- a12 : Label
|||(PatSynt) a12 |- x ▷ (x:[a13]_(a12); ())
|||(TyUnify)  |- a13@[a12] ~ a11 ▷ (a11 ↦ a13@[a12])
||(PatSynt) - |- [x] ▷ (x:[a13]_(a12); (a11 ↦ a13@[a12]))
||||(TypeInf) x:[a13]_(a12) |- + => ((Int@[a14] -> (Int@[a15] -> Int)); (); ⊤)
||||||(Kinding) |- a12 : Label
|||||(TypeInf) x:[a13]_(a12) |- x => (a13; (); ⊤)
||||(TypeInf) x:[a13]_(a12) |- [x] => (a13@[a16]; (); (a16 ≤ a12))
||||||(TyUnify)  |- a13 ~ Int ▷ (a13 ↦ Int)
||||||(TyUnify)  |- a16 ~ a14 ▷ (a16 ↦ a14)
|||||(TyUnify)  |- a13@[a16] ~ Int@[a14] ▷ (a13 ↦ Int, a16 ↦ a14)
|||||(TyUnify)  |- (Int@[a15] -> Int) ~ a17 ▷ (a17 ↦ (Int@[a15] -> Int))
||||(TyUnify)  |- (Int@[a14] -> (Int@[a15] -> Int)) ~ (a13@[a16] -> a17) ▷ (a13 ↦ Int, a16 ↦ a14, a17 ↦ (Int@[a15] -> Int))
|||(TypeInf) x:[a13]_(a12) |- (+ [x]) => ((Int@[a15] -> Int); (a13 ↦ Int, a16 ↦ a14, a17 ↦ (Int@[a15] -> Int)); (a16 ≤ a12))
||||(TypeInf) {} |- 2 => (Int; (); ⊤)
|||(TypeInf) x:[a13]_(a12) |- [2] => (Int@[a18]; (); ⊤)
|||||(TyUnify)  |- Int ~ Int ▷ ()
|||||(TyUnify)  |- a18 ~ a15 ▷ (a18 ↦ a15)
||||(TyUnify)  |- Int@[a18] ~ Int@[a15] ▷ (a18 ↦ a15)
||||(TyUnify)  |- Int ~ a19 ▷ (a19 ↦ Int)
|||(TyUnify)  |- (Int@[a15] -> Int) ~ (Int@[a18] -> a19) ▷ (a18 ↦ a15, a19 ↦ Int)
||(TypeInf) x:[a13]_(a12) |- ((+ [x]) [2]) => (Int; (a17 ↦ (Int@[a15] -> Int), a13 ↦ Int, a16 ↦ a14, a18 ↦ a15, a19 ↦ Int); (a16 ≤ a12))
|(TypeInf) {} |- (\[x].((+ [x]) [2])) => ((Int@[a12] -> Int); (a17 ↦ (Int@[a15] -> Int), a13 ↦ Int, a11 ↦ Int@[a12], a16 ↦ a14, a18 ↦ a15, a19 ↦ Int); (a16 ≤ a12))
(TypeInf) B.b2:[Int]_(a7), B.f:[a9]_(a10), B.y:[Int]_(a8) |- [(\[x].((+ [x]) [2]))] => ((Int@[a12] -> Int)@[a20]; (a17 ↦ (Int@[a15] -> Int), a13 ↦ Int, a11 ↦ Int@[a12], a16 ↦ a14, a18 ↦ a15, a19 ↦ Int); (a16 ≤ a12))
B.h : (Int@[a27] -> Int)@[a35]
|||(Kinding) |- a27 : Label
||||(Kinding) |- a28 : Type
||||(Kinding) |- a27 : Label
|||(PatSynt) a27 |- x ▷ (x:[a28]_(a27); ())
|||(TyUnify)  |- a28@[a27] ~ a26 ▷ (a26 ↦ a28@[a27])
||(PatSynt) - |- [x] ▷ (x:[a28]_(a27); (a26 ↦ a28@[a27]))
||||(TypeInf) x:[a28]_(a27) |- * => ((Int@[a29] -> (Int@[a30] -> Int)); (); ⊤)
||||||(Kinding) |- a27 : Label
|||||(TypeInf) x:[a28]_(a27) |- x => (a28; (); ⊤)
||||(TypeInf) x:[a28]_(a27) |- [x] => (a28@[a31]; (); (a31 ≤ a27))
||||||(TyUnify)  |- a28 ~ Int ▷ (a28 ↦ Int)
||||||(TyUnify)  |- a31 ~ a29 ▷ (a31 ↦ a29)
|||||(TyUnify)  |- a28@[a31] ~ Int@[a29] ▷ (a28 ↦ Int, a31 ↦ a29)
|||||(TyUnify)  |- (Int@[a30] -> Int) ~ a32 ▷ (a32 ↦ (Int@[a30] -> Int))
||||(TyUnify)  |- (Int@[a29] -> (Int@[a30] -> Int)) ~ (a28@[a31] -> a32) ▷ (a28 ↦ Int, a31 ↦ a29, a32 ↦ (Int@[a30] -> Int))
|||(TypeInf) x:[a28]_(a27) |- (* [x]) => ((Int@[a30] -> Int); (a28 ↦ Int, a31 ↦ a29, a32 ↦ (Int@[a30] -> Int)); (a31 ≤ a27))
||||(TypeInf) {} |- 1 => (Int; (); ⊤)
|||(TypeInf) x:[a28]_(a27) |- [1] => (Int@[a33]; (); ⊤)
|||||(TyUnify)  |- Int ~ Int ▷ ()
|||||(TyUnify)  |- a33 ~ a30 ▷ (a33 ↦ a30)
||||(TyUnify)  |- Int@[a33] ~ Int@[a30] ▷ (a33 ↦ a30)
||||(TyUnify)  |- Int ~ a34 ▷ (a34 ↦ Int)
|||(TyUnify)  |- (Int@[a30] -> Int) ~ (Int@[a33] -> a34) ▷ (a33 ↦ a30, a34 ↦ Int)
||(TypeInf) x:[a28]_(a27) |- ((* [x]) [1]) => (Int; (a32 ↦ (Int@[a30] -> Int), a28 ↦ Int, a31 ↦ a29, a33 ↦ a30, a34 ↦ Int); (a31 ≤ a27))
|(TypeInf) {} |- (\[x].((* [x]) [1])) => ((Int@[a27] -> Int); (a32 ↦ (Int@[a30] -> Int), a28 ↦ Int, a26 ↦ Int@[a27], a31 ↦ a29, a33 ↦ a30, a34 ↦ Int); (a31 ≤ a27))
(TypeInf) B.b2:[Int]_(a22), B.f:[(Int@[a12] -> Int)]_(a21), B.h:[a24]_(a25), B.y:[Int]_(a23) |- [(\[x].((* [x]) [1]))] => ((Int@[a27] -> Int)@[a35]; (a32 ↦ (Int@[a30] -> Int), a28 ↦ Int, a26 ↦ Int@[a27], a31 ↦ a29, a33 ↦ a30, a34 ↦ Int); (a31 ≤ a27))

=== Inferred Types (Syntax.VL) ===
B.y : Int@[a2]
B.b2 : Int@[a6]
B.f : (Int@[a12] -> Int)@[a20]
B.h : (Int@[a27] -> Int)@[a35]

[DEBUG] Add global env : B.y : Int@[a2]
B.b2 : Int@[a6]
B.f : (Int@[a12] -> Int)@[a20]
B.h : (Int@[a27] -> Int)@[a35]
[DEBUG] Add global constraints : (a14 ≤ a12) and (a29 ≤ a27)
[DEBUG] Counter: 36
[DEBUG] globalConstraints:
(a14 ≤ a12) and (a29 ≤ a27)

[DEBUG] bundledConsSchemes:


[DEBUG] List of modules not yet compiled:
B-1.0.0
A-1.0.1
A-1.0.0
Main-Root


===================================
=== Start compiling module B-1.0.0
===================================

=== AST (Syntax.Absyn) ===
module B where

y = 1
b1 = 1
f x = x + 1

g x = x + 1














=== Name resolution ===
module B where

y = 1
b1 = 1
f x = x + 1

g x = x + 1















=== Desugared AST (Syntax.Desugared) ===
module B where where
y = 1

b1 = 1

f = (\x.((+ x) 1))

g = (\x.((+ x) 1))


=== Normalized AST (Syntax.Desugared) ===
module B where where
y = 1

b1 = 1

f = (\x.((+ x) 1))

g = (\x.((+ x) 1))


=== AST (Syntax.VL) ===
module B where where
y = 1

b1 = 1

f = (\[x].((+ [x]) [1]))

g = (\[x].((+ [x]) [1]))


=== AST (Syntax.VL), after duplicating external variables ===
module B where where
y = 1

b1 = 1

f = (\[x].((+ [x]) [1]))

g = (\[x].((+ [x]) [1]))

[DEBUG] ct     : *->0, +->0
[DEBUG] ct'    : *->0, +->0
[DEBUG] ctdiff : *->0, +->0
[DEBUG] ctstart: *->0, +->0

=== Importing Exteranal ModulesType (Syntax.VL) ===
[DEBUG] Imported TEnv      : {}
[DEBUG] Imported UEnv      : {}
=== Duplicate External Symbols (Syntax.VL) ===
[DEBUG] Duplicated Imported TEnv        : {}
[DEBUG] Duplicated Imported UEnv        : {}
[DEBUG] Duplicated Imported Constraints : ⊤

[DEBUG] add duplicated constraints                 : 
⊤
[DEBUG] add duplicated external variable resources : 
{}

[DEBUG] Initial Counter     : 36

=== Type Inference (Syntax.VL) ===
B.y : Int@[a38]
|(TypeInf) {} |- 1 => (Int; (); ⊤)
(TypeInf) B.y:[a36]_(a37) |- [1] => (Int@[a38]; (); ⊤)
B.b1 : Int@[a42]
|(TypeInf) {} |- 1 => (Int; (); ⊤)
(TypeInf) B.b1:[a40]_(a41), B.y:[Int]_(a39) |- [1] => (Int@[a42]; (); ⊤)
B.f : (Int@[a48] -> Int)@[a56]
|||(Kinding) |- a48 : Label
||||(Kinding) |- a49 : Type
||||(Kinding) |- a48 : Label
|||(PatSynt) a48 |- x ▷ (x:[a49]_(a48); ())
|||(TyUnify)  |- a49@[a48] ~ a47 ▷ (a47 ↦ a49@[a48])
||(PatSynt) - |- [x] ▷ (x:[a49]_(a48); (a47 ↦ a49@[a48]))
||||(TypeInf) x:[a49]_(a48) |- + => ((Int@[a50] -> (Int@[a51] -> Int)); (); ⊤)
||||||(Kinding) |- a48 : Label
|||||(TypeInf) x:[a49]_(a48) |- x => (a49; (); ⊤)
||||(TypeInf) x:[a49]_(a48) |- [x] => (a49@[a52]; (); (a52 ≤ a48))
||||||(TyUnify)  |- a49 ~ Int ▷ (a49 ↦ Int)
||||||(TyUnify)  |- a52 ~ a50 ▷ (a52 ↦ a50)
|||||(TyUnify)  |- a49@[a52] ~ Int@[a50] ▷ (a49 ↦ Int, a52 ↦ a50)
|||||(TyUnify)  |- (Int@[a51] -> Int) ~ a53 ▷ (a53 ↦ (Int@[a51] -> Int))
||||(TyUnify)  |- (Int@[a50] -> (Int@[a51] -> Int)) ~ (a49@[a52] -> a53) ▷ (a49 ↦ Int, a52 ↦ a50, a53 ↦ (Int@[a51] -> Int))
|||(TypeInf) x:[a49]_(a48) |- (+ [x]) => ((Int@[a51] -> Int); (a49 ↦ Int, a52 ↦ a50, a53 ↦ (Int@[a51] -> Int)); (a52 ≤ a48))
||||(TypeInf) {} |- 1 => (Int; (); ⊤)
|||(TypeInf) x:[a49]_(a48) |- [1] => (Int@[a54]; (); ⊤)
|||||(TyUnify)  |- Int ~ Int ▷ ()
|||||(TyUnify)  |- a54 ~ a51 ▷ (a54 ↦ a51)
||||(TyUnify)  |- Int@[a54] ~ Int@[a51] ▷ (a54 ↦ a51)
||||(TyUnify)  |- Int ~ a55 ▷ (a55 ↦ Int)
|||(TyUnify)  |- (Int@[a51] -> Int) ~ (Int@[a54] -> a55) ▷ (a54 ↦ a51, a55 ↦ Int)
||(TypeInf) x:[a49]_(a48) |- ((+ [x]) [1]) => (Int; (a53 ↦ (Int@[a51] -> Int), a49 ↦ Int, a52 ↦ a50, a54 ↦ a51, a55 ↦ Int); (a52 ≤ a48))
|(TypeInf) {} |- (\[x].((+ [x]) [1])) => ((Int@[a48] -> Int); (a53 ↦ (Int@[a51] -> Int), a49 ↦ Int, a47 ↦ Int@[a48], a52 ↦ a50, a54 ↦ a51, a55 ↦ Int); (a52 ≤ a48))
(TypeInf) B.b1:[Int]_(a43), B.f:[a45]_(a46), B.y:[Int]_(a44) |- [(\[x].((+ [x]) [1]))] => ((Int@[a48] -> Int)@[a56]; (a53 ↦ (Int@[a51] -> Int), a49 ↦ Int, a47 ↦ Int@[a48], a52 ↦ a50, a54 ↦ a51, a55 ↦ Int); (a52 ≤ a48))
B.g : (Int@[a63] -> Int)@[a71]
|||(Kinding) |- a63 : Label
||||(Kinding) |- a64 : Type
||||(Kinding) |- a63 : Label
|||(PatSynt) a63 |- x ▷ (x:[a64]_(a63); ())
|||(TyUnify)  |- a64@[a63] ~ a62 ▷ (a62 ↦ a64@[a63])
||(PatSynt) - |- [x] ▷ (x:[a64]_(a63); (a62 ↦ a64@[a63]))
||||(TypeInf) x:[a64]_(a63) |- + => ((Int@[a65] -> (Int@[a66] -> Int)); (); ⊤)
||||||(Kinding) |- a63 : Label
|||||(TypeInf) x:[a64]_(a63) |- x => (a64; (); ⊤)
||||(TypeInf) x:[a64]_(a63) |- [x] => (a64@[a67]; (); (a67 ≤ a63))
||||||(TyUnify)  |- a64 ~ Int ▷ (a64 ↦ Int)
||||||(TyUnify)  |- a67 ~ a65 ▷ (a67 ↦ a65)
|||||(TyUnify)  |- a64@[a67] ~ Int@[a65] ▷ (a64 ↦ Int, a67 ↦ a65)
|||||(TyUnify)  |- (Int@[a66] -> Int) ~ a68 ▷ (a68 ↦ (Int@[a66] -> Int))
||||(TyUnify)  |- (Int@[a65] -> (Int@[a66] -> Int)) ~ (a64@[a67] -> a68) ▷ (a64 ↦ Int, a67 ↦ a65, a68 ↦ (Int@[a66] -> Int))
|||(TypeInf) x:[a64]_(a63) |- (+ [x]) => ((Int@[a66] -> Int); (a64 ↦ Int, a67 ↦ a65, a68 ↦ (Int@[a66] -> Int)); (a67 ≤ a63))
||||(TypeInf) {} |- 1 => (Int; (); ⊤)
|||(TypeInf) x:[a64]_(a63) |- [1] => (Int@[a69]; (); ⊤)
|||||(TyUnify)  |- Int ~ Int ▷ ()
|||||(TyUnify)  |- a69 ~ a66 ▷ (a69 ↦ a66)
||||(TyUnify)  |- Int@[a69] ~ Int@[a66] ▷ (a69 ↦ a66)
||||(TyUnify)  |- Int ~ a70 ▷ (a70 ↦ Int)
|||(TyUnify)  |- (Int@[a66] -> Int) ~ (Int@[a69] -> a70) ▷ (a69 ↦ a66, a70 ↦ Int)
||(TypeInf) x:[a64]_(a63) |- ((+ [x]) [1]) => (Int; (a68 ↦ (Int@[a66] -> Int), a64 ↦ Int, a67 ↦ a65, a69 ↦ a66, a70 ↦ Int); (a67 ≤ a63))
|(TypeInf) {} |- (\[x].((+ [x]) [1])) => ((Int@[a63] -> Int); (a68 ↦ (Int@[a66] -> Int), a64 ↦ Int, a62 ↦ Int@[a63], a67 ↦ a65, a69 ↦ a66, a70 ↦ Int); (a67 ≤ a63))
(TypeInf) B.b1:[Int]_(a58), B.f:[(Int@[a48] -> Int)]_(a57), B.g:[a60]_(a61), B.y:[Int]_(a59) |- [(\[x].((+ [x]) [1]))] => ((Int@[a63] -> Int)@[a71]; (a68 ↦ (Int@[a66] -> Int), a64 ↦ Int, a62 ↦ Int@[a63], a67 ↦ a65, a69 ↦ a66, a70 ↦ Int); (a67 ≤ a63))

=== Inferred Types (Syntax.VL) ===
B.y : Int@[a38]
B.b1 : Int@[a42]
B.f : (Int@[a48] -> Int)@[a56]
B.g : (Int@[a63] -> Int)@[a71]

[DEBUG] Add global env : B.y : Int@[a38]
B.b1 : Int@[a42]
B.f : (Int@[a48] -> Int)@[a56]
B.g : (Int@[a63] -> Int)@[a71]
[DEBUG] Add global constraints : (a50 ≤ a48) and (a65 ≤ a63)
[DEBUG] Counter: 72

============================================
=== Bundling top-level symbols of module B
============================================
[DEBUG] Add bundled tenv        : B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78), B.y:[Int]_(a80)
[DEBUG] Add bundled uenv        : a72:Label, a73:Label, a74:Label, a75:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80:Label
[DEBUG] Add bundled/global constraints : (((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])
[DEBUG] Add bundled constraints schemes : (b1,(a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])), (b2,(a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}])), (f,(((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}])))), (g,(a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}])), (h,(a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}])), (y,(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))))
[DEBUG] Counter     : 81
[DEBUG] globalConstraints:
(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}]) and (a50 ≤ a48) and (a65 ≤ a63) and (a14 ≤ a12) and (a29 ≤ a27)

[DEBUG] bundledConsSchemes:
B
(b1,(a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])), (b2,(a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}])), (f,(((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}])))), (g,(a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}])), (h,(a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}])), (y,(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))))

[DEBUG] List of modules not yet compiled:
A-1.0.1
A-1.0.0
Main-Root


===================================
=== Start compiling module A-1.0.1
===================================

=== AST (Syntax.Absyn) ===
module A where

import B

a = f (f y)

=== Name resolution ===
module A where

import B

a = B.f(B.fB.y)


=== Desugared AST (Syntax.Desugared) ===
module A where where
a = (B.f (B.f B.y))


=== Normalized AST (Syntax.Desugared) ===
module A where where
a = (B.f (B.f B.y))


=== AST (Syntax.VL) ===
module A where where
a = (B.f [(B.f [B.y])])


=== AST (Syntax.VL), after duplicating external variables ===
module A where where
a = (B.__f_0 [(B.__f_1 [B.__y_0])])

[DEBUG] ct     : *->0, +->0
[DEBUG] ct'    : B.f->2, B.y->1, *->0, +->0
[DEBUG] ctdiff : B.f->2, B.y->1, *->0, +->0
[DEBUG] ctstart: B.f->0, B.y->0, *->0, +->0

=== Importing Exteranal ModulesType (Syntax.VL) ===
[DEBUG] Imported TEnv      : B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78), B.y:[Int]_(a80)
[DEBUG] Imported UEnv      : a72:Label, a73:Label, a74:Label, a75:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80:Label
=== Duplicate External Symbols (Syntax.VL) ===
[DEBUG] Duplicated Imported TEnv        : B.__f_0:[(Int@[a75_0] -> Int)]_(a74_0), B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0), B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78)
[DEBUG] Duplicated Imported UEnv        : a72:Label, a73:Label, a74_0:Label, a74_1:Label, a75_0:Label, a75_1:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80_0:Label
[DEBUG] Duplicated Imported Constraints : (((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}])))

[DEBUG] add duplicated constraints                 : 
(((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}])))
[DEBUG] add duplicated external variable resources : 
B.__f_0 -> B.f
a74_0,
B.__f_1 -> B.f
a74_1,
B.__y_0 -> B.y
a80_0

[DEBUG] Initial Counter     : 81

=== Type Inference (Syntax.VL) ===
A.a : Int@[a87]
|||(Kinding) |- a74_0 : Label
||(TypeInf) B.__f_0:[(Int@[a75_0] -> Int)]_(a74_0), B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- B.__f_0 => ((Int@[a75_0] -> Int); (); ⊤)
|||||(Kinding) |- a74_1 : Label
||||(TypeInf) B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- B.__f_1 => ((Int@[a75_1] -> Int); (); ⊤)
||||||(Kinding) |- a80_0 : Label
|||||(TypeInf) B.__y_0:[Int]_(a80_0) |- B.__y_0 => (Int; (); ⊤)
||||(TypeInf) B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- [B.__y_0] => (Int@[a83]; (); (a83 ≤ a80_0))
||||||(TyUnify)  |- Int ~ Int ▷ ()
||||||(TyUnify)  |- a83 ~ a75_1 ▷ (a83 ↦ a75_1)
|||||(TyUnify)  |- Int@[a83] ~ Int@[a75_1] ▷ (a83 ↦ a75_1)
|||||(TyUnify)  |- Int ~ a84 ▷ (a84 ↦ Int)
||||(TyUnify)  |- (Int@[a75_1] -> Int) ~ (Int@[a83] -> a84) ▷ (a83 ↦ a75_1, a84 ↦ Int)
|||(TypeInf) B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- (B.__f_1 [B.__y_0]) => (Int; (a83 ↦ a75_1, a84 ↦ Int); (a83 ≤ a80_0))
||(TypeInf) B.__f_0:[(Int@[a75_0] -> Int)]_(a74_0), B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- [(B.__f_1 [B.__y_0])] => (Int@[a85]; (a83 ↦ a75_1, a84 ↦ Int); (a83 ≤ a80_0) and (a85 ≤ a80_0) and (a85 ≤ a74_1))
||||(TyUnify)  |- Int ~ Int ▷ ()
||||(TyUnify)  |- a85 ~ a75_0 ▷ (a85 ↦ a75_0)
|||(TyUnify)  |- Int@[a85] ~ Int@[a75_0] ▷ (a85 ↦ a75_0)
|||(TyUnify)  |- Int ~ a86 ▷ (a86 ↦ Int)
||(TyUnify)  |- (Int@[a75_0] -> Int) ~ (Int@[a85] -> a86) ▷ (a85 ↦ a75_0, a86 ↦ Int)
|(TypeInf) B.__f_0:[(Int@[a75_0] -> Int)]_(a74_0), B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0) |- (B.__f_0 [(B.__f_1 [B.__y_0])]) => (Int; (a84 ↦ Int, a83 ↦ a75_1, a85 ↦ a75_0, a86 ↦ Int); (a83 ≤ a80_0) and (a85 ≤ a80_0) and (a85 ≤ a74_1))
(TypeInf) A.a:[a81]_(a82), B.__f_0:[(Int@[a75_0] -> Int)]_(a74_0), B.__f_1:[(Int@[a75_1] -> Int)]_(a74_1), B.__y_0:[Int]_(a80_0), B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78) |- [(B.__f_0 [(B.__f_1 [B.__y_0])])] => (Int@[a87]; (a84 ↦ Int, a83 ↦ a75_1, a85 ↦ a75_0, a86 ↦ Int); (a83 ≤ a80_0) and (a85 ≤ a80_0) and (a85 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0))

=== Inferred Types (Syntax.VL) ===
A.a : Int@[a87]

[DEBUG] Add global env : A.a : Int@[a87]
[DEBUG] Add global constraints : (a75_1 ≤ a80_0) and (a75_0 ≤ a80_0) and (a75_0 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0)
[DEBUG] Counter: 88
[DEBUG] globalConstraints:
(a75_1 ≤ a80_0) and (a75_0 ≤ a80_0) and (a75_0 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0) and (((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}]))) and (((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}]) and (a50 ≤ a48) and (a65 ≤ a63) and (a14 ≤ a12) and (a29 ≤ a27)

[DEBUG] bundledConsSchemes:
B
(b1,(a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])), (b2,(a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}])), (f,(((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}])))), (g,(a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}])), (h,(a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}])), (y,(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))))

[DEBUG] List of modules not yet compiled:
A-1.0.0
Main-Root


===================================
=== Start compiling module A-1.0.0
===================================

=== AST (Syntax.Absyn) ===
module A where

import B

a = f y

=== Name resolution ===
module A where

import B

a = B.fB.y


=== Desugared AST (Syntax.Desugared) ===
module A where where
a = (B.f B.y)


=== Normalized AST (Syntax.Desugared) ===
module A where where
a = (B.f B.y)


=== AST (Syntax.VL) ===
module A where where
a = (B.f [B.y])


=== AST (Syntax.VL), after duplicating external variables ===
module A where where
a = (B.__f_2 [B.__y_1])

[DEBUG] ct     : B.f->2, B.y->1, *->0, +->0
[DEBUG] ct'    : B.f->3, B.y->2, *->0, +->0
[DEBUG] ctdiff : B.f->1, B.y->1, *->0, +->0
[DEBUG] ctstart: B.f->2, B.y->1, *->0, +->0

=== Importing Exteranal ModulesType (Syntax.VL) ===
[DEBUG] Imported TEnv      : B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78), B.y:[Int]_(a80)
[DEBUG] Imported UEnv      : a72:Label, a73:Label, a74:Label, a75:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80:Label
=== Duplicate External Symbols (Syntax.VL) ===
[DEBUG] Duplicated Imported TEnv        : B.__f_2:[(Int@[a75_2] -> Int)]_(a74_2), B.__y_1:[Int]_(a80_1), B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78)
[DEBUG] Duplicated Imported UEnv        : a72:Label, a73:Label, a74_2:Label, a75_2:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80_1:Label
[DEBUG] Duplicated Imported Constraints : (((a74_2 ≤ a56) and (a75_2 ≤ a48) and (a74_2 ≤ [{B:[1.0.0]}])) or ((a74_2 ≤ a20) and (a75_2 ≤ a12) and (a74_2 ≤ [{B:[1.0.1]}]))) and (((a80_1 ≤ a38) and (a80_1 ≤ [{B:[1.0.0]}])) or ((a80_1 ≤ a2) and (a80_1 ≤ [{B:[1.0.1]}])))

[DEBUG] add duplicated constraints                 : 
(((a74_2 ≤ a56) and (a75_2 ≤ a48) and (a74_2 ≤ [{B:[1.0.0]}])) or ((a74_2 ≤ a20) and (a75_2 ≤ a12) and (a74_2 ≤ [{B:[1.0.1]}]))) and (((a80_1 ≤ a38) and (a80_1 ≤ [{B:[1.0.0]}])) or ((a80_1 ≤ a2) and (a80_1 ≤ [{B:[1.0.1]}])))
[DEBUG] add duplicated external variable resources : 
B.__f_2 -> B.f
a74_2,
B.__y_1 -> B.y
a80_1

[DEBUG] Initial Counter     : 88

=== Type Inference (Syntax.VL) ===
A.a : Int@[a92]
|||(Kinding) |- a74_2 : Label
||(TypeInf) B.__f_2:[(Int@[a75_2] -> Int)]_(a74_2), B.__y_1:[Int]_(a80_1) |- B.__f_2 => ((Int@[a75_2] -> Int); (); ⊤)
||||(Kinding) |- a80_1 : Label
|||(TypeInf) B.__y_1:[Int]_(a80_1) |- B.__y_1 => (Int; (); ⊤)
||(TypeInf) B.__f_2:[(Int@[a75_2] -> Int)]_(a74_2), B.__y_1:[Int]_(a80_1) |- [B.__y_1] => (Int@[a90]; (); (a90 ≤ a80_1))
||||(TyUnify)  |- Int ~ Int ▷ ()
||||(TyUnify)  |- a90 ~ a75_2 ▷ (a90 ↦ a75_2)
|||(TyUnify)  |- Int@[a90] ~ Int@[a75_2] ▷ (a90 ↦ a75_2)
|||(TyUnify)  |- Int ~ a91 ▷ (a91 ↦ Int)
||(TyUnify)  |- (Int@[a75_2] -> Int) ~ (Int@[a90] -> a91) ▷ (a90 ↦ a75_2, a91 ↦ Int)
|(TypeInf) B.__f_2:[(Int@[a75_2] -> Int)]_(a74_2), B.__y_1:[Int]_(a80_1) |- (B.__f_2 [B.__y_1]) => (Int; (a90 ↦ a75_2, a91 ↦ Int); (a90 ≤ a80_1))
(TypeInf) A.a:[a88]_(a89), B.__f_2:[(Int@[a75_2] -> Int)]_(a74_2), B.__y_1:[Int]_(a80_1), B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78) |- [(B.__f_2 [B.__y_1])] => (Int@[a92]; (a90 ↦ a75_2, a91 ↦ Int); (a90 ≤ a80_1) and (a92 ≤ a80_1) and (a92 ≤ a74_2))

=== Inferred Types (Syntax.VL) ===
A.a : Int@[a92]

[DEBUG] Add global env : A.a : Int@[a92]
[DEBUG] Add global constraints : (a75_2 ≤ a80_1) and (a92 ≤ a80_1) and (a92 ≤ a74_2)
[DEBUG] Counter: 93

============================================
=== Bundling top-level symbols of module A
============================================
[DEBUG] Add bundled tenv        : A.a:[Int]_(a93)
[DEBUG] Add bundled uenv        : a93:Label
[DEBUG] Add bundled/global constraints : (((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}])))
[DEBUG] Add bundled constraints schemes : (a,(((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}]))))
[DEBUG] Counter     : 94
[DEBUG] globalConstraints:
(((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}]))) and (a75_2 ≤ a80_1) and (a92 ≤ a80_1) and (a92 ≤ a74_2) and (((a74_2 ≤ a56) and (a75_2 ≤ a48) and (a74_2 ≤ [{B:[1.0.0]}])) or ((a74_2 ≤ a20) and (a75_2 ≤ a12) and (a74_2 ≤ [{B:[1.0.1]}]))) and (((a80_1 ≤ a38) and (a80_1 ≤ [{B:[1.0.0]}])) or ((a80_1 ≤ a2) and (a80_1 ≤ [{B:[1.0.1]}]))) and (a75_1 ≤ a80_0) and (a75_0 ≤ a80_0) and (a75_0 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0) and (((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}]))) and (((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}]) and (a50 ≤ a48) and (a65 ≤ a63) and (a14 ≤ a12) and (a29 ≤ a27)

[DEBUG] bundledConsSchemes:
A
(a,(((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}])))), B
(b1,(a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])), (b2,(a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}])), (f,(((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}])))), (g,(a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}])), (h,(a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}])), (y,(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))))

[DEBUG] List of modules not yet compiled:
Main-Root


===================================
=== Start compiling module Main-Root
===================================

=== AST (Syntax.Absyn) ===
module Main where

import A
import B








































main =
  let sumTpl x = case x of (x1,x2) -> x1 + x2
  in sumTpl (y,b1)














=== Name resolution ===
module Main where

import A
import B








































main =
  let sumTpl x = case x of (x1,x2) -> x1 + x2
  in sumTpl (B.y,B.b1)















=== Desugared AST (Syntax.Desugared) ===
module Main where where
main = ((\sumTpl.(sumTpl (B.y, B.b1))) (\x.(case x of {(x1, x2) -> ((+ x1) x2)})))


=== Normalized AST (Syntax.Desugared) ===
module Main where where
main = ((\sumTpl.(sumTpl (B.y, B.b1))) (\x.(case x of {(x1, x2) -> ((+ x1) x2)})))


=== AST (Syntax.VL) ===
module Main where where
main = ((\[sumTpl].(sumTpl [(B.y, B.b1)])) [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))])


=== AST (Syntax.VL), after duplicating external variables ===
module Main where where
main = ((\[sumTpl].(sumTpl [(B.__y_2, B.__b1_0)])) [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))])

[DEBUG] ct     : B.f->3, B.y->2, *->0, +->0
[DEBUG] ct'    : B.b1->1, B.f->3, B.y->3, *->0, +->0
[DEBUG] ctdiff : B.b1->1, B.f->0, B.y->1, *->0, +->0
[DEBUG] ctstart: B.b1->0, B.f->3, B.y->2, *->0, +->0

=== Importing Exteranal ModulesType (Syntax.VL) ===
[DEBUG] Imported TEnv      : A.a:[Int]_(a93), B.b1:[Int]_(a72), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78), B.y:[Int]_(a80)
[DEBUG] Imported UEnv      : a72:Label, a73:Label, a74:Label, a75:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80:Label, a93:Label
=== Duplicate External Symbols (Syntax.VL) ===
[DEBUG] Duplicated Imported TEnv        : A.a:[Int]_(a93), B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78)
[DEBUG] Duplicated Imported UEnv        : a72_0:Label, a73:Label, a74:Label, a75:Label, a76:Label, a77:Label, a78:Label, a79:Label, a80_2:Label, a93:Label
[DEBUG] Duplicated Imported Constraints : (a72_0 ≤ a42) and (a72_0 ≤ [{B:[1.0.0]}]) and (((a80_2 ≤ a38) and (a80_2 ≤ [{B:[1.0.0]}])) or ((a80_2 ≤ a2) and (a80_2 ≤ [{B:[1.0.1]}])))

[DEBUG] add duplicated constraints                 : 
(a72_0 ≤ a42) and (a72_0 ≤ [{B:[1.0.0]}]) and (((a80_2 ≤ a38) and (a80_2 ≤ [{B:[1.0.0]}])) or ((a80_2 ≤ a2) and (a80_2 ≤ [{B:[1.0.1]}])))
[DEBUG] add duplicated external variable resources : 
B.__b1_0 -> B.b1
a72_0,
B.__y_2 -> B.y
a80_2

[DEBUG] Initial Counter     : 94

=== Type Inference (Syntax.VL) ===
Main.main : Int@[a118]
||||(Kinding) |- a97 : Label
|||||(Kinding) |- a98 : Type
|||||(Kinding) |- a97 : Label
||||(PatSynt) a97 |- sumTpl ▷ (sumTpl:[a98]_(a97); ())
||||(TyUnify)  |- a98@[a97] ~ a96 ▷ (a96 ↦ a98@[a97])
|||(PatSynt) - |- [sumTpl] ▷ (sumTpl:[a98]_(a97); (a96 ↦ a98@[a97]))
|||||(Kinding) |- a97 : Label
||||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2), sumTpl:[a98]_(a97) |- sumTpl => (a98; (); ⊤)
|||||||(Kinding) |- a80_2 : Label
||||||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- B.__y_2 => (Int; (); ⊤)
|||||||(Kinding) |- a72_0 : Label
||||||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- B.__b1_0 => (Int; (); ⊤)
|||||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- (B.__y_2, B.__b1_0) => ((Tuple Int Int); (); ⊤)
||||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2), sumTpl:[a98]_(a97) |- [(B.__y_2, B.__b1_0)] => ((Tuple Int Int)@[a99]; (); (a99 ≤ a80_2) and (a99 ≤ a72_0))
||||(TyUnify)  |- a98 ~ ((Tuple Int Int)@[a99] -> a100) ▷ (a98 ↦ ((Tuple Int Int)@[a99] -> a100))
|||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2), sumTpl:[a98]_(a97) |- (sumTpl [(B.__y_2, B.__b1_0)]) => (a100; (a98 ↦ ((Tuple Int Int)@[a99] -> a100)); (a99 ≤ a80_2) and (a99 ≤ a72_0))
||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- (\[sumTpl].(sumTpl [(B.__y_2, B.__b1_0)])) => ((((Tuple Int Int)@[a99] -> a100)@[a97] -> a100); (a98 ↦ ((Tuple Int Int)@[a99] -> a100), a96 ↦ ((Tuple Int Int)@[a99] -> a100)@[a97]); (a99 ≤ a80_2) and (a99 ≤ a72_0))
|||||(Kinding) |- a102 : Label
||||||(Kinding) |- a103 : Type
||||||(Kinding) |- a102 : Label
|||||(PatSynt) a102 |- x ▷ (x:[a103]_(a102); ())
|||||(TyUnify)  |- a103@[a102] ~ a101 ▷ (a101 ↦ a103@[a102])
||||(PatSynt) - |- [x] ▷ (x:[a103]_(a102); (a101 ↦ a103@[a102]))
|||||||(Kinding) |- a102 : Label
||||||(TypeInf) x:[a103]_(a102) |- x => (a103; (); ⊤)
|||||(TypeInf) x:[a103]_(a102) |- [x] => (a103@[a104]; (); (a104 ≤ a102))
||||||(Kinding) |- a106 : Label
|||||||(TyUnify)  |- (Tuple a108 a109) ~ a107 ▷ (a107 ↦ (Tuple a108 a109))
|||||||(Kinding) |- a108 : Type
||||||||(Kinding) |- a108 : Type
||||||||(Kinding) |- a106 : Label
|||||||(PatSynt) a106 |- x1 ▷ (x1:[a108]_(a106); ())
|||||||(Kinding) |- a109 : Type
||||||||(Kinding) |- a109 : Type
||||||||(Kinding) |- a106 : Label
|||||||(PatSynt) a106 |- x2 ▷ (x2:[a109]_(a106); ())
||||||(PatSynt) a106 |- (x1, x2) ▷ (x1:[a108]_(a106), x2:[a109]_(a106); (a107 ↦ (Tuple a108 a109)))
|||||||(TyUnify)  |- a107 ~ a103 ▷ (a107 ↦ a103)
|||||||(TyUnify)  |- a106 ~ a104 ▷ (a106 ↦ a104)
||||||(TyUnify)  |- a107@[a106] ~ a103@[a104] ▷ (a106 ↦ a104, a107 ↦ a103)
||||||(TyUnify)  |- (Tuple a108 a109) ~ a103 ▷ (a103 ↦ (Tuple a108 a109))
|||||(PatSynt) - |- [(x1, x2)] ▷ (x1:[a108]_(a106), x2:[a109]_(a106); (a103 ↦ (Tuple a108 a109), a106 ↦ a104, a107 ↦ (Tuple a108 a109), a107 ↦ (Tuple a108 a109)))
|||||||(TypeInf) x:[a103]_(a102), x1:[a108]_(a106), x2:[a109]_(a106) |- + => ((Int@[a110] -> (Int@[a111] -> Int)); (); ⊤)
|||||||||(Kinding) |- a106 : Label
||||||||(TypeInf) x1:[a108]_(a106) |- x1 => (a108; (); ⊤)
|||||||(TypeInf) x:[a103]_(a102), x1:[a108]_(a106), x2:[a109]_(a106) |- [x1] => (a108@[a112]; (); (a112 ≤ a106))
|||||||||(TyUnify)  |- a108 ~ Int ▷ (a108 ↦ Int)
|||||||||(TyUnify)  |- a112 ~ a110 ▷ (a112 ↦ a110)
||||||||(TyUnify)  |- a108@[a112] ~ Int@[a110] ▷ (a108 ↦ Int, a112 ↦ a110)
||||||||(TyUnify)  |- (Int@[a111] -> Int) ~ a113 ▷ (a113 ↦ (Int@[a111] -> Int))
|||||||(TyUnify)  |- (Int@[a110] -> (Int@[a111] -> Int)) ~ (a108@[a112] -> a113) ▷ (a108 ↦ Int, a112 ↦ a110, a113 ↦ (Int@[a111] -> Int))
||||||(TypeInf) x:[a103]_(a102), x1:[a108]_(a106), x2:[a109]_(a106) |- (+ [x1]) => ((Int@[a111] -> Int); (a108 ↦ Int, a112 ↦ a110, a113 ↦ (Int@[a111] -> Int)); (a112 ≤ a106))
||||||||(Kinding) |- a106 : Label
|||||||(TypeInf) x2:[a109]_(a106) |- x2 => (a109; (); ⊤)
||||||(TypeInf) x:[a103]_(a102), x1:[a108]_(a106), x2:[a109]_(a106) |- [x2] => (a109@[a114]; (); (a114 ≤ a106))
||||||||(TyUnify)  |- a109 ~ Int ▷ (a109 ↦ Int)
||||||||(TyUnify)  |- a114 ~ a111 ▷ (a114 ↦ a111)
|||||||(TyUnify)  |- a109@[a114] ~ Int@[a111] ▷ (a109 ↦ Int, a114 ↦ a111)
|||||||(TyUnify)  |- Int ~ a115 ▷ (a115 ↦ Int)
||||||(TyUnify)  |- (Int@[a111] -> Int) ~ (a109@[a114] -> a115) ▷ (a109 ↦ Int, a114 ↦ a111, a115 ↦ Int)
|||||(TypeInf) x:[a103]_(a102), x1:[a108]_(a106), x2:[a109]_(a106) |- ((+ [x1]) [x2]) => (Int; (a113 ↦ (Int@[a111] -> Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a115 ↦ Int); (a112 ≤ a106) and (a114 ≤ a106))
||||(TypeInf) x:[a103]_(a102) |- (case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}) => (Int; (a113 ↦ (Int@[a111] -> Int), a103 ↦ (Tuple Int Int), a106 ↦ a104, a107 ↦ (Tuple Int Int), a107 ↦ (Tuple Int Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a115 ↦ Int); (a104 ≤ a102) and (a112 ≤ a106) and (a114 ≤ a106))
|||(TypeInf) {} |- (\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])})) => (((Tuple Int Int)@[a102] -> Int); (a113 ↦ (Int@[a111] -> Int), a103 ↦ (Tuple Int Int), a101 ↦ (Tuple Int Int)@[a102], a106 ↦ a104, a107 ↦ (Tuple Int Int), a107 ↦ (Tuple Int Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a115 ↦ Int); (a104 ≤ a102) and (a112 ≤ a106) and (a114 ≤ a106))
||(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))] => (((Tuple Int Int)@[a102] -> Int)@[a116]; (a113 ↦ (Int@[a111] -> Int), a103 ↦ (Tuple Int Int), a101 ↦ (Tuple Int Int)@[a102], a106 ↦ a104, a107 ↦ (Tuple Int Int), a107 ↦ (Tuple Int Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a115 ↦ Int); (a104 ≤ a102) and (a112 ≤ a106) and (a114 ≤ a106))
|||||||(TyUnify)  |- Int ~ Int ▷ ()
|||||||(TyUnify)  |- Int ~ Int ▷ ()
||||||(TyUnify)  |- (Tuple Int Int) ~ (Tuple Int Int) ▷ ()
||||||(TyUnify)  |- a99 ~ a102 ▷ (a99 ↦ a102)
|||||(TyUnify)  |- (Tuple Int Int)@[a99] ~ (Tuple Int Int)@[a102] ▷ (a99 ↦ a102)
|||||(TyUnify)  |- Int ~ a100 ▷ (a100 ↦ Int)
||||(TyUnify)  |- ((Tuple Int Int)@[a102] -> Int) ~ ((Tuple Int Int)@[a99] -> a100) ▷ (a100 ↦ Int, a99 ↦ a102)
||||(TyUnify)  |- a116 ~ a97 ▷ (a116 ↦ a97)
|||(TyUnify)  |- ((Tuple Int Int)@[a102] -> Int)@[a116] ~ ((Tuple Int Int)@[a99] -> a100)@[a97] ▷ (a100 ↦ Int, a116 ↦ a97, a99 ↦ a102)
|||(TyUnify)  |- Int ~ a117 ▷ (a117 ↦ Int)
||(TyUnify)  |- (((Tuple Int Int)@[a99] -> a100)@[a97] -> a100) ~ (((Tuple Int Int)@[a102] -> Int)@[a116] -> a117) ▷ (a100 ↦ Int, a116 ↦ a97, a117 ↦ Int, a99 ↦ a102)
|(TypeInf) B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2) |- ((\[sumTpl].(sumTpl [(B.__y_2, B.__b1_0)])) [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))]) => (Int; (a113 ↦ (Int@[a111] -> Int), a115 ↦ Int, a101 ↦ (Tuple Int Int)@[a102], a103 ↦ (Tuple Int Int), a106 ↦ a104, a107 ↦ (Tuple Int Int), a107 ↦ (Tuple Int Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a116 ↦ a97, a117 ↦ Int, a100 ↦ Int, a96 ↦ ((Tuple Int Int)@[a102] -> Int)@[a97], a98 ↦ ((Tuple Int Int)@[a102] -> Int), a99 ↦ a102); (a99 ≤ a80_2) and (a99 ≤ a72_0) and (a104 ≤ a102) and (a112 ≤ a106) and (a114 ≤ a106))
(TypeInf) A.a:[Int]_(a93), B.__b1_0:[Int]_(a72_0), B.__y_2:[Int]_(a80_2), B.b2:[Int]_(a73), B.f:[(Int@[a75] -> Int)]_(a74), B.g:[(Int@[a77] -> Int)]_(a76), B.h:[(Int@[a79] -> Int)]_(a78), Main.main:[a94]_(a95) |- [((\[sumTpl].(sumTpl [(B.__y_2, B.__b1_0)])) [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))])] => (Int@[a118]; (a113 ↦ (Int@[a111] -> Int), a115 ↦ Int, a101 ↦ (Tuple Int Int)@[a102], a103 ↦ (Tuple Int Int), a106 ↦ a104, a107 ↦ (Tuple Int Int), a107 ↦ (Tuple Int Int), a108 ↦ Int, a109 ↦ Int, a112 ↦ a110, a114 ↦ a111, a116 ↦ a97, a117 ↦ Int, a100 ↦ Int, a96 ↦ ((Tuple Int Int)@[a102] -> Int)@[a97], a98 ↦ ((Tuple Int Int)@[a102] -> Int), a99 ↦ a102); (a99 ≤ a80_2) and (a99 ≤ a72_0) and (a104 ≤ a102) and (a112 ≤ a106) and (a114 ≤ a106) and (a118 ≤ a80_2) and (a118 ≤ a72_0))

=== Inferred Types (Syntax.VL) ===
Main.main : Int@[a118]

[DEBUG] Add global env : Main.main : Int@[a118]
[DEBUG] Add global constraints : (a102 ≤ a80_2) and (a102 ≤ a72_0) and (a104 ≤ a102) and (a110 ≤ a104) and (a111 ≤ a104) and (a118 ≤ a80_2) and (a118 ≤ a72_0)
[DEBUG] Counter: 119
[DEBUG] globalConstraints:
(a102 ≤ a80_2) and (a102 ≤ a72_0) and (a104 ≤ a102) and (a110 ≤ a104) and (a111 ≤ a104) and (a118 ≤ a80_2) and (a118 ≤ a72_0) and (a72_0 ≤ a42) and (a72_0 ≤ [{B:[1.0.0]}]) and (((a80_2 ≤ a38) and (a80_2 ≤ [{B:[1.0.0]}])) or ((a80_2 ≤ a2) and (a80_2 ≤ [{B:[1.0.1]}]))) and (((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}]))) and (a75_2 ≤ a80_1) and (a92 ≤ a80_1) and (a92 ≤ a74_2) and (((a74_2 ≤ a56) and (a75_2 ≤ a48) and (a74_2 ≤ [{B:[1.0.0]}])) or ((a74_2 ≤ a20) and (a75_2 ≤ a12) and (a74_2 ≤ [{B:[1.0.1]}]))) and (((a80_1 ≤ a38) and (a80_1 ≤ [{B:[1.0.0]}])) or ((a80_1 ≤ a2) and (a80_1 ≤ [{B:[1.0.1]}]))) and (a75_1 ≤ a80_0) and (a75_0 ≤ a80_0) and (a75_0 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0) and (((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}]))) and (((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}]) and (a50 ≤ a48) and (a65 ≤ a63) and (a14 ≤ a12) and (a29 ≤ a27)

[DEBUG] bundledConsSchemes:
A
(a,(((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}])))), B
(b1,(a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}])), (b2,(a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}])), (f,(((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}])))), (g,(a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}])), (h,(a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}])), (y,(((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))))

[DEBUG] List of modules not yet compiled:
None

=== External Variables ===
B.__b1_0 Main-Root a72_0
B.__f_0 A-1.0.1 a74_0
B.__f_1 A-1.0.1 a74_1
B.__f_2 A-1.0.0 a74_2
B.__y_0 A-1.0.1 a80_0
B.__y_1 A-1.0.0 a80_1
B.__y_2 Main-Root a80_2

=== Constraints ===
(a102 ≤ a80_2) and (a102 ≤ a72_0) and (a104 ≤ a102) and (a110 ≤ a104) and (a111 ≤ a104) and (a118 ≤ a80_2) and (a118 ≤ a72_0) and (a72_0 ≤ a42) and (a72_0 ≤ [{B:[1.0.0]}]) and (((a80_2 ≤ a38) and (a80_2 ≤ [{B:[1.0.0]}])) or ((a80_2 ≤ a2) and (a80_2 ≤ [{B:[1.0.1]}]))) and (((a93 ≤ a92) and (a93 ≤ [{A:[1.0.0]}])) or ((a93 ≤ a87) and (a93 ≤ [{A:[1.0.1]}]))) and (a75_2 ≤ a80_1) and (a92 ≤ a80_1) and (a92 ≤ a74_2) and (((a74_2 ≤ a56) and (a75_2 ≤ a48) and (a74_2 ≤ [{B:[1.0.0]}])) or ((a74_2 ≤ a20) and (a75_2 ≤ a12) and (a74_2 ≤ [{B:[1.0.1]}]))) and (((a80_1 ≤ a38) and (a80_1 ≤ [{B:[1.0.0]}])) or ((a80_1 ≤ a2) and (a80_1 ≤ [{B:[1.0.1]}]))) and (a75_1 ≤ a80_0) and (a75_0 ≤ a80_0) and (a75_0 ≤ a74_1) and (a87 ≤ a80_0) and (a87 ≤ a74_1) and (a87 ≤ a74_0) and (((a74_0 ≤ a56) and (a75_0 ≤ a48) and (a74_0 ≤ [{B:[1.0.0]}])) or ((a74_0 ≤ a20) and (a75_0 ≤ a12) and (a74_0 ≤ [{B:[1.0.1]}]))) and (((a74_1 ≤ a56) and (a75_1 ≤ a48) and (a74_1 ≤ [{B:[1.0.0]}])) or ((a74_1 ≤ a20) and (a75_1 ≤ a12) and (a74_1 ≤ [{B:[1.0.1]}]))) and (((a80_0 ≤ a38) and (a80_0 ≤ [{B:[1.0.0]}])) or ((a80_0 ≤ a2) and (a80_0 ≤ [{B:[1.0.1]}]))) and (((a80 ≤ a38) and (a80 ≤ [{B:[1.0.0]}])) or ((a80 ≤ a2) and (a80 ≤ [{B:[1.0.1]}]))) and (a78 ≤ a35) and (a79 ≤ a27) and (a78 ≤ [{B:[1.0.1]}]) and (a76 ≤ a71) and (a77 ≤ a63) and (a76 ≤ [{B:[1.0.0]}]) and (((a74 ≤ a56) and (a75 ≤ a48) and (a74 ≤ [{B:[1.0.0]}])) or ((a74 ≤ a20) and (a75 ≤ a12) and (a74 ≤ [{B:[1.0.1]}]))) and (a73 ≤ a6) and (a73 ≤ [{B:[1.0.1]}]) and (a72 ≤ a42) and (a72 ≤ [{B:[1.0.0]}]) and (a50 ≤ a48) and (a65 ≤ a63) and (a14 ≤ a12) and (a29 ≤ a27)

=== Solver result ===
a102 : {B:[1.0.0]}
a104 : {B:[1.0.0]}
a110 : {B:[1.0.0]}
a111 : {B:[1.0.0]}
a118 : {B:[1.0.0]}
a12 : {}
a14 : {}
a2 : {}
a20 : {}
a27 : {}
a29 : {}
a35 : {}
a38 : {}
a42 : {}
a48 : {}
a50 : {}
a56 : {}
a6 : {}
a63 : {}
a65 : {}
a71 : {}
a72 : {B:[1.0.0]}
a72_0 : {B:[1.0.0]}
a73 : {B:[1.0.1]}
a74 : {B:[1.0.1]}
a74_0 : {B:[1.0.1]}
a74_1 : {B:[1.0.1]}
a74_2 : {B:[1.0.1]}
a75 : {}
a75_0 : {B:[1.0.1]}
a75_1 : {B:[1.0.1]}
a75_2 : {B:[1.0.1]}
a76 : {B:[1.0.0]}
a77 : {}
a78 : {B:[1.0.1]}
a79 : {}
a80 : {B:[1.0.1]}
a80_0 : {B:[1.0.1]}
a80_1 : {B:[1.0.1]}
a80_2 : {B:[1.0.0]}
a87 : {B:[1.0.1]}
a92 : {B:[1.0.1]}
a93 : {A:[1.0.1], B:[1.0.1]}

=== Labels of External Variables ===
B.__b1_0 : B.b1 : Main-Root : a72_0 : {B:[1.0.0]}
B.__f_0 : B.f : A-1.0.1 : a74_0 : {B:[1.0.1]}
B.__f_1 : B.f : A-1.0.1 : a74_1 : {B:[1.0.1]}
B.__f_2 : B.f : A-1.0.0 : a74_2 : {B:[1.0.1]}
B.__y_0 : B.y : A-1.0.1 : a80_0 : {B:[1.0.1]}
B.__y_1 : B.y : A-1.0.0 : a80_1 : {B:[1.0.1]}
B.__y_2 : B.y : Main-Root : a80_2 : {B:[1.0.0]}

=== VLDecls ===
A-1.0.0 : a = (B.__f_2 [B.__y_1])
A-1.0.1 : a = (B.__f_0 [(B.__f_1 [B.__y_0])])
B-1.0.0 : b1 = 1, f = (\[x].((+ [x]) [1])), g = (\[x].((+ [x]) [1])), y = 1
B-1.0.1 : b2 = 2, f = (\[x].((+ [x]) [2])), h = (\[x].((* [x]) [1])), y = 2
Main-Root : main = ((\[sumTpl].(sumTpl [(B.__y_2, B.__b1_0)])) [(\[x].(case [x] of {[(x1, x2)] -> ((+ [x1]) [x2])}))])

=== Extraction ===
(\ sumTpl -> sumTpl (1, 1))
  (\ x ->
     case x of
         (x1, x2) -> (+) x1 x2)
